name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform (${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }})
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true
      ARM_SKIP_PROVIDER_REGISTRATION: true

      # Base skip list (no comments, single line). You can trim later if you like.
      SKIP_CHECKS_BASE: CKV_AZURE_233,CKV_AZURE_165,CKV_AZURE_237,CKV_AZURE_167,CKV_AZURE_163,CKV_AZURE_166,CKV_AZURE_164,CKV_AZURE_4,CKV_AZURE_117,CKV_AZURE_170,CKV_AZURE_226,CKV_AZURE_227,CKV2_AZURE_32

    steps:
      - uses: actions/checkout@v4

      - name: Detect Environment
        id: envsel
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi
          echo "Selected env=${{ steps.envsel.outputs.env }}"

      - name: Set TF_DIR
        run: echo "TF_DIR=terraform-code/stack" >> $GITHUB_ENV

      # Provide both paths: one relative to TF_DIR (for terraform) and one from repo root (for checkov)
      - name: Select tfvars file
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "TFVARS_FILE=../environments/production/prod.tfvars" >> $GITHUB_ENV
            echo "TFVARS_FILE_REPO=terraform-code/environments/production/prod.tfvars" >> $GITHUB_ENV
          else
            echo "TFVARS_FILE=../environments/staging/staging.tfvars" >> $GITHUB_ENV
            echo "TFVARS_FILE_REPO=terraform-code/environments/staging/staging.tfvars" >> $GITHUB_ENV
          fi

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Read module ref (prod must be a tag or commit; staging can be 'main')
      - name: Read Module Ref
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            REF_FILE="terraform-code/environments/production/module-ref.txt"
          else
            REF_FILE="terraform-code/environments/staging/module-ref.txt"
          fi

          if [ ! -f "$REF_FILE" ]; then
            echo "ERROR: $REF_FILE does not exist." >&2
            exit 1
          fi

          MODULE_REF="$(tr -d ' \t\r\n' < "$REF_FILE")"
          echo "MODULE_REF=$MODULE_REF" >> "$GITHUB_ENV"

          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            if [ -z "$MODULE_REF" ] || [ "$MODULE_REF" = "main" ]; then
              echo "ERROR: In production, MODULE_REF must be a tag or commit SHA (not 'main')." >&2
              exit 1
            fi
          else
            if [ "$MODULE_REF" = "main" ]; then
              echo "WARNING: Using 'main' for staging is allowed." >&2
            fi
          fi

      - name: Render main.tf from template
        run: |
          sed "s#__REF__#${MODULE_REF}#g" terraform-code/stack/main.tf.tmpl > terraform-code/stack/main.tf
          echo "Rendered main.tf (first 200 lines):"
          sed -n '1,200p' terraform-code/stack/main.tf

      - name: Terraform Format (write)
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -recursive

      - name: Terraform Format (check)
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -diff -recursive

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Run TFLint
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint --minimum-failure-severity=error

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            KEY="state/production.terraform.tfstate"
          else
            KEY="state/${{ steps.envsel.outputs.env }}.terraform.tfstate"
          fi
          terraform init -upgrade -input=false -reconfigure -backend-config="key=${KEY}"

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      # Build Checkov skip list per environment.
      # Staging adds CKV_TF_1,CKV_TF_2 (allow using 'main'); prod does NOT skip those.
      - name: Set Checkov skip list by env
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "staging" ]; then
            echo "COMBINED_SKIP_CHECKS=${SKIP_CHECKS_BASE},CKV_TF_1,CKV_TF_2" >> $GITHUB_ENV
          else
            echo "COMBINED_SKIP_CHECKS=${SKIP_CHECKS_BASE}" >> $GITHUB_ENV
          fi

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        shell: bash
        run: |
          unset TF_CLI_ARGS TF_CLI_ARGS_plan
          echo "PWD=$(pwd)"; ls -la
          set +e
          terraform plan -input=false -no-color \
            -var-file="${{ env.TFVARS_FILE }}" \
            -out=tfplan \
            -detailed-exitcode \
            -compact-warnings \
            1>plan.stdout.log 2>plan.stderr.log
          code=$?
          echo "----- terraform plan STDOUT -----"; tail -n +1 plan.stdout.log || true
          echo "----- terraform plan STDERR -----"; tail -n +1 plan.stderr.log || true
          echo "terraform plan exit code: $code"
          if [ $code -eq 1 ]; then exit 1; fi
          exit 0

      - name: Export plan to JSON
        working-directory: ${{ env.TF_DIR }}
        run: terraform show -json tfplan > plan.json

      - name: Checkov (IaC source scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE_REPO }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false
          skip_check: ${{ env.COMBINED_SKIP_CHECKS }}

      - name: Checkov (Terraform plan scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/plan.json
          framework: terraform_plan
          output_format: sarif
          output_file_path: results-plan.sarif
          soft_fail: false
          skip_check: ${{ env.COMBINED_SKIP_CHECKS }}

      - name: Manual Approval for Production
        if: github.event_name == 'workflow_dispatch' && steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve tfplan
