name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform (${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }})
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      - uses: actions/checkout@v4

      - name: Detect Environment
        id: envsel
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi
          echo "Selected env: ${{ steps.envsel.outputs.env }}"

      - name: Set TF_DIR
        run: echo "TF_DIR=terraform-code/stack" >> $GITHUB_ENV

      - name: Select tfvars file
        shell: bash
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "TFVARS_FILE=terraform-code/environments/production/prod.tfvars" >> $GITHUB_ENV
          else
            echo "TFVARS_FILE=terraform-code/environments/staging/staging.tfvars" >> $GITHUB_ENV
          fi

      # --- Normalize and read module ref ---
      - name: Normalize module-ref.txt and export MODULE_REF
        shell: bash
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            f=terraform-code/environments/production/module-ref.txt
          else
            f=terraform-code/environments/staging/module-ref.txt
          fi
          tr -d '\r' < "$f" | sed 's/[[:space:]]*$//' > "$f.tmp" && mv "$f.tmp" "$f"
          test -s "$f" || (echo "module-ref.txt is empty" && exit 1)
          echo "MODULE_REF=$(cat "$f")" >> $GITHUB_ENV

      - name: Render main.tf from template (ZIP archive URLs)
        shell: bash
        run: |
          sed "s#__REF__#${MODULE_REF}#g" terraform-code/stack/main.tf.tmpl > terraform-code/stack/main.tf
          if grep -q '__REF__' terraform-code/stack/main.tf; then
            echo "Template placeholder __REF__ still present after render"; exit 1
          fi
          echo "---- first 120 lines of rendered main.tf ----"
          sed -n '1,120p' terraform-code/stack/main.tf

      # --- Assert we do NOT have git:: sources & we DO have ZIP archive paths ---
      - name: Assert rendered module sources are archive-style (no git::)
        shell: bash
        run: |
          echo "--- MODULE_REF=${MODULE_REF} ---"
          if grep -nE 'git::|\.git\?ref=' terraform-code/stack/main.tf; then
            echo "❌ Found git-style module source(s) in terraform-code/stack/main.tf"
            exit 1
          fi
          if ! grep -nE 'github\.com/rare-beauty/terraform-infrastructure/archive/.+\.zip//terraform/modules/' terraform-code/stack/main.tf; then
            echo "❌ Expected ZIP archive sources missing in terraform-code/stack/main.tf"
            exit 1
          fi

      # --- Preflight: confirm subdirs exist inside the ZIP for this ref ---
      - name: Verify module subdirs exist in ZIP
        shell: bash
        run: |
          set -euo pipefail
          REF="${MODULE_REF}"
          # Prefer /archive/REF.zip. If that 404s, try the refs/heads path (for branches).
          URL1="https://github.com/rare-beauty/terraform-infrastructure/archive/${REF}.zip"
          URL2="https://github.com/rare-beauty/terraform-infrastructure/archive/refs/heads/${REF}.zip"
          ZIP_URL="$URL1"
          if ! curl -sI "$URL1" | head -n1 | grep -q ' 200 '; then
            if curl -sI "$URL2" | head -n1 | grep -q ' 200 '; then
              ZIP_URL="$URL2"
            else
              echo "❌ Could not fetch archive for ref '${REF}' via ${URL1} or ${URL2}"
              exit 1
            fi
          fi

          echo "Fetching ${ZIP_URL}"
          curl -sSL "${ZIP_URL}" -o /tmp/ti.zip
          unzip -Z1 /tmp/ti.zip > /tmp/zip.list

          must_exist () {
            local subpath="$1"
            if ! grep -qE "/${subpath}(/|$)" /tmp/zip.list; then
              echo "❌ Missing '${subpath}' in archive for ref '${REF}'"
              head -n 80 /tmp/zip.list || true
              exit 1
            fi
          }

          must_exist "terraform/modules/acr"
          must_exist "terraform/modules/aks"
          must_exist "terraform/modules/azurekeyvault"
          must_exist "terraform/modules/rbac"
          must_exist "terraform/modules/resourcegroup"
          must_exist "terraform/modules/subnet"
          must_exist "terraform/modules/virtualnetwork"
          echo "✅ ZIP contains all expected module subdirs."

      # --- Ensure no stale cache can re-introduce old sources ---
      - name: Clean Terraform caches
        working-directory: ${{ env.TF_DIR }}
        run: rm -rf .terraform .terraform.lock.hcl

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      # ---- TFLint (Dev/Staging): don't fail on warnings like ref=branch) ----
      - name: Run TFLint (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint --minimum-failure-severity=error

      # ---- TFLint (Production): strict ----
      - name: Run TFLint (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint

      # ---- Checkov (IaC source scan) split by env ----
      - name: Checkov (IaC source scan, Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false
          skip_check: CKV_TF_1,CKV_TF_2,CKV_AZURE_163,CKV_AZURE_165,CKV_AZURE_166,CKV_AZURE_167,CKV_AZURE_164,CKV_AZURE_117,CKV_AZURE_116,CKV_AZURE_170,CKV_AZURE_226,CKV_AZURE_109,CKV2_AZURE_32

      - name: Checkov (IaC source scan, Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false
      # -----------------------------------------------

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        shell: bash
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            terraform init -input=false \
              -backend-config=../../backend.common.hcl \
              -backend-config=key=state/production.terraform.tfstate
          else
            terraform init -upgrade -input=false \
              -backend-config=../../backend.common.hcl \
              -backend-config=key=state/${{ steps.envsel.outputs.env }}.terraform.tfstate
          fi

      - name: Terraform Format
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color -var-file="${{ env.TFVARS_FILE }}" -out=tfplan

      - name: Export plan to JSON
        working-directory: ${{ env.TF_DIR }}
        run: terraform show -json tfplan > plan.json

      - name: Checkov (Terraform plan scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/plan.json
          framework: terraform_plan
          output_format: sarif
          output_file_path: results-plan.sarif
          soft_fail: false

      - name: Manual Approval for Production
        if: github.event_name == 'workflow_dispatch' && steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve tfplan
