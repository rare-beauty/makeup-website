name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform (${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }})
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true
      ARM_SKIP_PROVIDER_REGISTRATION: true
      # SKIP_CHECKS: CKV_AZURE_233,CKV_AZURE_237,CKV_AZURE_165,CKV_AZURE_164,CKV_AZURE_166,CKV_AZURE_167,CKV_AZURE_163,CKV_AZURE_109,CKV_AZURE_189,CKV2_AZURE_32,CKV_AZURE_4,CKV_AZURE_6,CKV_AZURE_171,CKV_AZURE_168,CKV_AZURE_141,CKV_AZURE_117,CKV_AZURE_116,CKV_AZURE_172,CKV_AZURE_170,CKV_AZURE_226,CKV_AZURE_232

    steps:
      - uses: actions/checkout@v4

      - name: Detect Environment
        id: envsel
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set TF_DIR
        run: echo "TF_DIR=terraform-code/stack" >> $GITHUB_ENV

      - name: Select tfvars file
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "TFVARS_FILE=terraform-code/environments/production/prod.tfvars" >> $GITHUB_ENV
          else
            echo "TFVARS_FILE=terraform-code/environments/staging/staging.tfvars" >> $GITHUB_ENV
          fi

      # --- Normalize module-ref.txt BEFORE reading it ---
      - name: Normalize module-ref.txt (line endings & whitespace)
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            f=terraform-code/environments/production/module-ref.txt
          else
            f=terraform-code/environments/staging/module-ref.txt
          fi
          tr -d '\r' < "$f" | sed 's/[[:space:]]*$//' > "$f.tmp" && mv "$f.tmp" "$f"
          if ! [ -s "$f" ]; then echo "module-ref.txt is empty"; exit 1; fi

      # Render main.tf BEFORE linters/scanners
      - name: Read Module Ref
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "MODULE_REF=$(cat terraform-code/environments/production/module-ref.txt)" >> $GITHUB_ENV
          else
            echo "MODULE_REF=$(cat terraform-code/environments/staging/module-ref.txt)" >> $GITHUB_ENV
          fi

      - name: Render main.tf from template
        run: |
          sed "s/__REF__/${MODULE_REF}/g" terraform-code/stack/main.tf.tmpl > terraform-code/stack/main.tf
          if grep -q '__REF__' terraform-code/stack/main.tf; then
            echo "Template placeholder __REF__ still present after render"; exit 1
          fi

      # --- Verify rendered module sources path is correct ---
      - name: Verify rendered module sources
        run: |
          echo "MODULE_REF=${MODULE_REF}"
          awk '/source *=/ && /rare-beauty\/terraform-infrastructure/ {print NR": "$0}' terraform-code/stack/main.tf
          if ! grep -q 'git::https://github.com/rare-beauty/terraform-infrastructure.git//terraform/modules/' terraform-code/stack/main.tf; then
            echo "❌ module sources missing the //terraform/modules/ subdir"; exit 1
          fi

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      # ---- TFLint (Dev/Staging): don't fail on warnings like ref=main ----
      - name: Run TFLint (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint --minimum-failure-severity=error

      # ---- TFLint (Production): strict (should pass with tag/SHA) ----
      - name: Run TFLint (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint

      # ---- Checkov (IaC source scan) split by env ----
      - name: Checkov (IaC source scan, Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false
          # Skip pinning + the other failing IDs only in non-prod
          skip_check: CKV_TF_1,CKV_TF_2,CKV_AZURE_163,CKV_AZURE_165,CKV_AZURE_166,CKV_AZURE_167,CKV_AZURE_164,CKV_AZURE_117,CKV_AZURE_116,CKV_AZURE_170,CKV_AZURE_226,CKV_AZURE_109,CKV2_AZURE_32

      - name: Checkov (IaC source scan, Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false
      # -----------------------------------------------

      - name: Terraform Init (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init -upgrade -input=false \
            -backend-config=../../backend.common.hcl \
            -backend-config=key=state/${{ steps.envsel.outputs.env }}.terraform.tfstate

      - name: Terraform Init (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init -input=false \
            -backend-config=../../backend.common.hcl \
            -backend-config=key=state/${{ steps.envsel.outputs.env }}.terraform.tfstate

      - name: Terraform Format
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color -var-file="${{ env.TFVARS_FILE }}" -out=tfplan

      - name: Export plan to JSON
        working-directory: ${{ env.TF_DIR }}
        run: terraform show -json tfplan > plan.json

      - name: Checkov (Terraform plan scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/plan.json
          framework: terraform_plan
          output_format: sarif
          output_file_path: results-plan.sarif
          soft_fail: false
          #skip_check: ${{ env.SKIP_CHECKS }}

      - name: Manual Approval for Production
        if: github.event_name == 'workflow_dispatch' && steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve tfplan
