name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform (${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }})
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      - uses: actions/checkout@v4

      - name: Detect Environment
        id: envsel
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set TF_DIR
        run: echo "TF_DIR=terraform-code/stack" >> $GITHUB_ENV

      - name: Select tfvars file
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "TFVARS_FILE=terraform-code/environments/production/prod.tfvars" >> $GITHUB_ENV
          else
            echo "TFVARS_FILE=terraform-code/environments/staging/staging.tfvars" >> $GITHUB_ENV
          fi

      # Ensure module-ref is clean (no CRLF or trailing space) before using it
      - name: Normalize module-ref.txt
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            f=terraform-code/environments/production/module-ref.txt
          else
            f=terraform-code/environments/staging/module-ref.txt
          fi
          tr -d '\r' < "$f" | sed 's/[[:space:]]*$//' > "$f.tmp" && mv "$f.tmp" "$f"
          if ! [ -s "$f" ]; then echo "module-ref.txt is empty"; exit 1; fi

      - name: Read Module Ref
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "MODULE_REF=$(cat terraform-code/environments/production/module-ref.txt)" >> $GITHUB_ENV
          else
            echo "MODULE_REF=$(cat terraform-code/environments/staging/module-ref.txt)" >> $GITHUB_ENV
          fi

      # Renders main.tf using your template. Template must use archive URLs like:
      # https://github.com/rare-beauty/terraform-infrastructure/archive/__REF__.tar.gz//terraform/modules/<module>
      - name: Render main.tf from template
        shell: bash
        run: |
          set -euo pipefail
          sed "s/__REF__/${MODULE_REF}/g" terraform-code/stack/main.tf.tmpl > terraform-code/stack/main.tf
          if grep -q '__REF__' terraform-code/stack/main.tf; then
            echo "Template placeholder __REF__ still present after render"; exit 1
          fi

      # Verify rendered sources: forbid git:: and require archive tarballs into //terraform/modules/
      - name: Verify rendered module sources
        shell: bash
        run: |
          set -euo pipefail
          echo "--- MODULE_REF=${MODULE_REF} ---"
          echo ">>> First 160 lines of rendered main.tf"
          sed -n '1,160p' terraform-code/stack/main.tf || true

          echo ">>> Checking for git-style sources (must be NONE)"
          if grep -nE 'git::|\.git\?ref=' terraform-code/stack/main.tf; then
            echo "❌ Found git-style module source(s) in rendered main.tf"
            exit 1
          fi

          echo ">>> Checking for archive-style sources (must be PRESENT)"
          # Must reference the archive tarball…
          grep -qE 'https://github.com/rare-beauty/terraform-infrastructure/archive/.+\.tar\.gz' terraform-code/stack/main.tf
          # …and use the modules subdir
          grep -qE '//terraform/modules/' terraform-code/stack/main.tf

          # Ensure each module is present
          for m in resourcegroup virtualnetwork subnet acr azurekeyvault aks rbac; do
            grep -qE "https://github.com/rare-beauty/terraform-infrastructure/archive/.+\.tar\.gz//terraform/modules/${m}" terraform-code/stack/main.tf \
              || { echo "❌ Missing module source for: ${m}"; exit 1; }
          done
          echo "✅ Archive-style module sources verified"

      # Show every .tf Terraform will read, to catch stray files with old sources
      - name: List all .tf files Terraform will read
        shell: bash
        run: |
          set -euo pipefail
          echo ">>> All .tf files under terraform-code/stack:"
          find terraform-code/stack -type f -name '*.tf' -print \
            -exec sh -c 'echo "--- {}"; sed -n "1,80p" "{}"' \;

      # Clean caches so no stale module fetches survive
      - name: Clean Terraform caches
        working-directory: ${{ env.TF_DIR }}
        run: rm -rf .terraform .terraform.lock.hcl

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      # Non-prod: allow leniency (e.g., not pinning)
      - name: Run TFLint (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint --minimum-failure-severity=error

      # Prod: strict
      - name: Run TFLint (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint

      # Checkov split by env (you can tweak skip list later)
      - name: Checkov (IaC source scan, Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false
          skip_check: CKV_TF_1,CKV_TF_2,CKV_AZURE_163,CKV_AZURE_165,CKV_AZURE_166,CKV_AZURE_167,CKV_AZURE_164,CKV_AZURE_117,CKV_AZURE_116,CKV_AZURE_170,CKV_AZURE_226,CKV_AZURE_109,CKV2_AZURE_32

      - name: Checkov (IaC source scan, Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          framework: terraform
          download_external_modules: true
          var_file: ${{ env.TFVARS_FILE }}
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: false

      # Init (upgrade modules only in non-prod)
      - name: Terraform Init (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init -upgrade -input=false \
            -backend-config=../../backend.common.hcl \
            -backend-config=key=state/${{ steps.envsel.outputs.env }}.terraform.tfstate

      - name: Terraform Init (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init -input=false \
            -backend-config=../../backend.common.hcl \
            -backend-config=key=state/${{ steps.envsel.outputs.env }}.terraform.tfstate

      - name: Terraform Format
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color -var-file="${{ env.TFVARS_FILE }}" -out=tfplan

      - name: Export plan to JSON
        working-directory: ${{ env.TF_DIR }}
        run: terraform show -json tfplan > plan.json

      - name: Checkov (Terraform plan scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/plan.json
          framework: terraform_plan
          output_format: sarif
          output_file_path: results-plan.sarif
          soft_fail: false

      - name: Manual Approval for Production
        if: github.event_name == 'workflow_dispatch' && steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve tfplan
