name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform (${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }})
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true
      ARM_SKIP_PROVIDER_REGISTRATION: true

      # ðŸ‘‡ DRY list of checks to skip in BOTH Checkov runs
      # SKIP_CHECKS: CKV_AZURE_233,CKV_AZURE_237,CKV_AZURE_165,CKV_AZURE_164,CKV_AZURE_166,CKV_AZURE_167,CKV_AZURE_163,CKV_AZURE_109,CKV_AZURE_189,CKV2_AZURE_32,CKV_AZURE_4,CKV_AZURE_6,CKV_AZURE_171,CKV_AZURE_168,CKV_AZURE_141,CKV_AZURE_117,CKV_AZURE_116,CKV_AZURE_172,CKV_AZURE_170,CKV_AZURE_226,CKV_AZURE_232
    

    steps:
      - uses: actions/checkout@v4

      - name: Detect Environment
        id: envsel
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set TF_DIR
        run: echo "TF_DIR=terraform-code/stack" >> $GITHUB_ENV

      - name: Select tfvars file
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "TFVARS_FILE=../environments/production/prod.tfvars" >> $GITHUB_ENV
          else
            echo "TFVARS_FILE=../environments/staging/staging.tfvars" >> $GITHUB_ENV
          fi

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ðŸ”€ move rendering BEFORE lint/format/validate/plan
      - name: Read Module Ref
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "MODULE_REF=$(cat terraform-code/environments/production/module-ref.txt)" >> $GITHUB_ENV
          else
            echo "MODULE_REF=$(cat terraform-code/environments/staging/module-ref.txt)" >> $GITHUB_ENV
          fi

      - name: Render main.tf from template
        run: |
          sed "s#__REF__#${MODULE_REF}#g" terraform-code/stack/main.tf.tmpl > terraform-code/stack/main.tf
          sed -n '1,200p' terraform-code/stack/main.tf

      # âœ… write format immediately after rendering
      - name: Terraform Format (write)
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -recursive

      # (optional) show diffs but keep passing if formatted above
      - name: Terraform Format (check)
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -diff -recursive

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      # âœ… correct flag; only fail on real errors
      - name: Run TFLint
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint --minimum-failure-severity=error

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            KEY="state/production.terraform.tfstate"
            UPGRADE_FLAG="-upgrade"
          else
            KEY="state/${{ steps.envsel.outputs.env }}.terraform.tfstate"
            UPGRADE_FLAG="-upgrade"
          fi
          terraform init $UPGRADE_FLAG -input=false -reconfigure \
            -backend-config="key=${KEY}"

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      # - name: Terraform Plan
      #   working-directory: ${{ env.TF_DIR }}
      #   run: terraform plan -input=false -no-color -var-file="${{ env.TFVARS_FILE }}" -out=tfplan

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        shell: bash
        run: |
          # Avoid hidden global flags
          unset TF_CLI_ARGS TF_CLI_ARGS_plan

          # Show where we are and file perms (make sure tfplan is writable)
          echo "PWD=$(pwd)"
          ls -la

          # Run plan; capture both stdout & stderr so we can see real errors
          set +e
          terraform plan -input=false -no-color \
            -var-file="${{ env.TFVARS_FILE }}" \
            -out=tfplan \
            -detailed-exitcode \
            -compact-warnings \
            1>plan.stdout.log 2>plan.stderr.log
          code=$?

          echo "----- terraform plan STDOUT -----"
          tail -n +1 plan.stdout.log || true
          echo "----- terraform plan STDERR -----"
          tail -n +1 plan.stderr.log || true
          echo "terraform plan exit code: $code"

          # 0 = no changes, 2 = changes present (OK), 1 = real error
          if [ $code -eq 1 ]; then
            exit 1
          fi
          exit 0



      - name: Export plan to JSON
        working-directory: ${{ env.TF_DIR }}
        run: terraform show -json tfplan > plan.json

      - name: Checkov (Terraform plan scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/plan.json
          framework: terraform_plan
          output_format: sarif
          output_file_path: results-plan.sarif
          soft_fail: false

      - name: Manual Approval for Production
        if: github.event_name == 'workflow_dispatch' && steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve tfplan
