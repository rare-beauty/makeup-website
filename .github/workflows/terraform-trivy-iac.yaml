name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment
        id: envsel
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set TF_DIR and TFVARS
        run: |
          echo "TF_DIR=terraform-code/environments/${{ steps.envsel.outputs.env }}" >> $GITHUB_ENV
          echo "TFVARS=${{ steps.envsel.outputs.env }}.tfvars" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Read module ref
        id: ref
        run: |
          REF=$(cat $TF_DIR/module-ref.txt | tr -d '[:space:]')
          echo "MODULE_REF=$REF" >> $GITHUB_ENV
          echo "ref=$REF" >> $GITHUB_OUTPUT

      - name: Render main.tf
        run: |
          sed "s|__REF__|${MODULE_REF}|g" terraform-code/stack/main.tf.tmpl > $TF_DIR/main.tf

      - name: Validate rendered sources
        run: |
          grep -E 'source\s*=\s*"git::https://.*/terraform/modules/' $TF_DIR/main.tf || {
            echo "::error ::Rendered main.tf missing //terraform/modules path"; exit 1; }
          head -20 $TF_DIR/main.tf

      - name: Sanity check infra repo
        run: |
          set -e
          git init /tmp/infra
          cd /tmp/infra
          git remote add origin https://github.com/rare-beauty/terraform-infrastructure.git
          if git fetch --depth 1 origin "${MODULE_REF}"; then
            git checkout FETCH_HEAD
          else
            git fetch --depth 1 origin && git checkout "${MODULE_REF}" || {
              echo "::error ::Cannot resolve MODULE_REF=${MODULE_REF}"; exit 1; }
          fi
          for m in resourcegroup virtualnetwork subnet acr azurekeyvault aks rbac; do
            test -d "terraform/modules/$m" || { echo "::error ::Missing $m module"; exit 1; }
          done
          echo "OK: all modules exist at ${MODULE_REF}"

      # --------- FIX 1: proper multi-line azurerm provider + data source ---------
      - name: Ensure modern azurerm provider in env folder
        run: |
          cat > "$TF_DIR/providers.auto.tf" <<'EOF'
          terraform {
            required_version = ">= 1.6.0, < 2.0.0"
            required_providers {
              azurerm = {
                source  = "hashicorp/azurerm"
                version = ">= 3.113.0, < 4.0.0"
              }
            }
          }

          provider "azurerm" {
            features {}
          }

          data "azurerm_client_config" "current" {}
          EOF
          echo "Wrote $TF_DIR/providers.auto.tf"

      # --------- FIX 2: add a minimal backend block in the env folder ----------
      - name: Ensure backend block exists in env folder
        run: |
          if [ ! -f "$TF_DIR/backend.tf" ]; then
            cat > "$TF_DIR/backend.tf" <<'EOF'
            terraform {
              backend "azurerm" {}
            }
            EOF
            echo "Wrote $TF_DIR/backend.tf"
          fi
          # Optional: verify backend.tfvars exists (you already use -backend-config=backend.tfvars)
          if [ ! -f "$TF_DIR/backend.tfvars" ]; then
            echo "::warning ::$TF_DIR/backend.tfvars is missing. Expected keys: resource_group_name, storage_account_name, container_name, key"
          fi

      # Force fresh provider resolution
      - name: Clean provider cache (force fresh provider)
        run: |
          rm -rf "$TF_DIR/.terraform"
          rm -f  "$TF_DIR/.terraform.lock.hcl"

      - name: Terraform fmt (write)
        run: terraform -chdir=$TF_DIR fmt -recursive

      - name: Terraform fmt (check)
        run: terraform -chdir=$TF_DIR fmt -check -recursive

      - name: Terraform init
        run: terraform -chdir=$TF_DIR init -upgrade -backend-config=backend.tfvars

      - name: Show Terraform & providers
        run: |
          terraform -chdir=$TF_DIR version
          echo "----------- providers -----------"
          terraform -chdir=$TF_DIR providers

      - name: Terraform validate
        run: terraform -chdir=$TF_DIR validate

      - name: Terraform plan
        run: terraform -chdir=$TF_DIR plan -input=false -var-file=$TFVARS -out=tfplan

      - name: Terraform plan JSON
        run: terraform -chdir=$TF_DIR show -json tfplan > tfplan.json

      - name: Checkov (source)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          quiet: true

      - name: Checkov (plan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/tfplan.json
          quiet: true

      - name: Manual Approval for Production
        if: steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform apply
        if: steps.envsel.outputs.env != 'production' || github.event_name == 'workflow_dispatch'
        run: terraform -chdir=$TF_DIR apply -input=false -auto-approve tfplan
