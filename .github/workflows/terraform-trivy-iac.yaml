name: Deploy Infrastructure

on:
  # Run when someone opens a PR that changes infrastructure code
  pull_request:
    paths: ['terraform-code/**']
  
  # Run when code is pushed to dev or main branches
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  
  # Allow manual deployment with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: "Which environment do you want to deploy?"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write    # Needed for Azure authentication
  contents: read     # Needed to read the repository

# Prevent multiple deployments running at the same time
concurrency:
  group: terraform-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    # Choose environment based on how the workflow was triggered
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    # Azure credentials for authentication
    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true

    steps:
      # Get the latest code
      - name: Get code from repository
        uses: actions/checkout@v4

      # Figure out which environment we're deploying to
      - name: Determine target environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual deployment - use selected environment
            echo "target=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            # Push to main branch - deploy to production
            echo "target=production" >> $GITHUB_OUTPUT
          else
            # Push to other branches - deploy to staging
            echo "target=staging" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to: ${{ steps.env.outputs.target }}"

      # Set up paths for this specific environment
      - name: Set up environment paths
        run: |
          echo "TF_DIR=terraform-code/environments/${{ steps.env.outputs.target }}" >> $GITHUB_ENV
          echo "TFVARS=${{ steps.env.outputs.target }}.tfvars" >> $GITHUB_ENV
          echo "Working with directory: terraform-code/environments/${{ steps.env.outputs.target }}"
          echo "Using variables file: ${{ steps.env.outputs.target }}.tfvars"

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Login to Azure using OIDC (no passwords needed!)
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Read which version of modules to use
      - name: Read module version
        run: |
          MODULE_VERSION=$(cat $TF_DIR/module-ref.txt | tr -d '[:space:]')
          echo "MODULE_REF=$MODULE_VERSION" >> $GITHUB_ENV
          echo "Using module version: $MODULE_VERSION"

      # Verify main.tf calls the stack module correctly
      - name: Verify main.tf configuration
        run: |
          echo "Verifying main.tf calls the stack module..."
          if grep -q "module.*stack" "$TF_DIR/main.tf"; then
            echo "✅ main.tf calls stack module"
            echo "Content preview:"
            cat "$TF_DIR/main.tf"
          else
            echo "❌ ERROR: main.tf doesn't call stack module"
            exit 1
          fi

      # Double-check that all required modules exist in the infrastructure repo
      - name: Verify infrastructure modules exist
        run: |
          echo "Checking if all required modules exist at version ${MODULE_REF}..."
          
          # Clone the infrastructure repo temporarily
          git init /tmp/infra
          cd /tmp/infra
          git remote add origin https://github.com/rare-beauty/terraform-infrastructure.git
          
          # Try to get the specific version
          if git fetch --depth 1 origin "${MODULE_REF}"; then
            git checkout FETCH_HEAD
          else
            git fetch --depth 1 origin && git checkout "${MODULE_REF}" || {
              echo "❌ ERROR: Cannot find version ${MODULE_REF} in infrastructure repo"
              exit 1
            }
          fi
          
          # Check all required modules exist
          REQUIRED_MODULES="resourcegroup virtualnetwork subnet acr azurekeyvault aks rbac"
          for module in $REQUIRED_MODULES; do
            if [ ! -d "terraform/modules/$module" ]; then
              echo "❌ ERROR: Missing required module: $module"
              exit 1
            fi
          done
          
          echo "✅ All required modules found at version ${MODULE_REF}"

      # Verify backend configuration exists
      - name: Verify backend configuration
        run: |
          echo "Checking for existing backend configuration..."
          if [ -f "$TF_DIR/backend.tf" ]; then
            echo "✅ Backend configuration found"
          else
            echo "❌ ERROR: backend.tf not found in $TF_DIR"
            exit 1
          fi
          
          if [ -f "$TF_DIR/backend.tfvars" ]; then
            echo "✅ Backend variables file found"
          else
            echo "❌ ERROR: backend.tfvars not found in $TF_DIR"
            echo "This file should contain: resource_group_name, storage_account_name, container_name, key"
            exit 1
          fi

      # Clean up any old Terraform state to avoid conflicts
      - name: Clean up old Terraform cache
        run: |
          echo "Cleaning up old Terraform files..."
          rm -rf "$TF_DIR/.terraform"
          rm -f  "$TF_DIR/.terraform.lock.hcl"
          echo "✅ Cleanup complete"

      # Format Terraform files to make them look nice
      - name: Format Terraform files
        run: |
          echo "Formatting Terraform files..."
          terraform -chdir=$TF_DIR fmt -recursive
          echo "✅ Files formatted"

      # Check that formatting is correct
      - name: Verify Terraform formatting
        run: |
          echo "Checking Terraform formatting..."
          terraform -chdir=$TF_DIR fmt -check -recursive
          echo "✅ Formatting is correct"

      # Initialize Terraform (download providers, set up backend)
      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform -chdir=$TF_DIR init -upgrade -backend-config=backend.tfvars
          echo "✅ Terraform initialized"

      # Show what versions we're using
      - name: Show Terraform version info
        run: |
          echo "Terraform version:"
          terraform -chdir=$TF_DIR version
          echo ""
          echo "Providers being used:"
          terraform -chdir=$TF_DIR providers

      # Validate that our Terraform configuration is correct
      - name: Validate Terraform configuration
        run: |
          echo "Validating Terraform configuration..."
          terraform -chdir=$TF_DIR validate
          echo "✅ Configuration is valid"

      # Create a plan showing what changes will be made
      - name: Create deployment plan
        run: |
          echo "Creating deployment plan..."
          terraform -chdir=$TF_DIR plan -input=false -var-file=$TFVARS -out=tfplan
          echo "✅ Plan created successfully"

      # Convert plan to JSON for security scanning
      - name: Convert plan to JSON
        run: |
          echo "Converting plan to JSON for security analysis..."
          terraform -chdir=$TF_DIR show -json tfplan > tfplan.json
          echo "✅ JSON plan created"

      # Run security checks on our Terraform code
      - name: Run security scan on code
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_DIR }}
          quiet: true

      # Run security checks on our deployment plan
      - name: Run security scan on plan
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/tfplan.json
          quiet: true

      # For production deployments, require manual approval
      - name: Request approval for production deployment
        if: steps.env.outputs.target == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      # Actually deploy the infrastructure
      - name: Deploy infrastructure
        if: steps.env.outputs.target != 'production' || github.event_name == 'workflow_dispatch'
        run: |
          echo "🚀 Deploying infrastructure to ${{ steps.env.outputs.target }}..."
          terraform -chdir=$TF_DIR apply -input=false -auto-approve tfplan
          echo "✅ Deployment completed successfully!"