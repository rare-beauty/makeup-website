name: Terraform Pipeline

on:
  pull_request:
    paths: ['terraform-code/**']
  push:
    branches: [ dev, main ]
    paths: ['terraform-code/**']
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging, production]

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform (${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }})
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}

    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC:        true
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      - uses: actions/checkout@v4

      - name: Detect Environment
        id: envsel
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi
          echo "Selected env=${{ steps.envsel.outputs.env }}"

      - name: Set TF_DIR
        run: echo "TF_DIR=terraform-code/stack" >> $GITHUB_ENV

      - name: Select tfvars file
        shell: bash
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            echo "TFVARS_FILE=terraform-code/environments/production/prod.tfvars" >> $GITHUB_ENV
          else
            echo "TFVARS_FILE=terraform-code/environments/staging/staging.tfvars" >> $GITHUB_ENV
          fi

      - name: Normalize module-ref.txt and export MODULE_REF
        shell: bash
        run: |
          if [ "${{ steps.envsel.outputs.env }}" = "production" ]; then
            f=terraform-code/environments/production/module-ref.txt
          else
            f=terraform-code/environments/staging/module-ref.txt
          fi
          tr -d '\r' < "$f" | sed 's/[[:space:]]*$//' > "$f.tmp" && mv "$f.tmp" "$f"
          test -s "$f" || (echo "module-ref.txt is empty" && exit 1)
          echo "MODULE_REF=$(cat "$f")" >> $GITHUB_ENV
          echo "MODULE_REF=$(cat "$f")"

      - name: Render main.tf from template (archive URLs)
        run: |
          sed "s#__REF__#${MODULE_REF}#g" terraform-code/stack/main.tf.tmpl > terraform-code/stack/main.tf
          echo "---- first 160 lines of rendered main.tf ----"
          sed -n '1,160p' terraform-code/stack/main.tf

      # Verify ZIP structure contains the expected subdirs with the correct top-level folder
      - name: Verify archive layout for ref
        shell: bash
        run: |
          set -euo pipefail
          ZIP_URL="https://github.com/rare-beauty/terraform-infrastructure/archive/${MODULE_REF}.zip"
          echo "Fetching ${ZIP_URL}"
          curl -sSL "${ZIP_URL}" -o /tmp/infra.zip
          unzip -Z1 /tmp/infra.zip > /tmp/zip.list

          ROOT="terraform-infrastructure-${MODULE_REF}"
          for path in \
            "$ROOT/terraform/modules/acr" \
            "$ROOT/terraform/modules/aks" \
            "$ROOT/terraform/modules/azurekeyvault" \
            "$ROOT/terraform/modules/rbac" \
            "$ROOT/terraform/modules/resourcegroup" \
            "$ROOT/terraform/modules/subnet" \
            "$ROOT/terraform/modules/virtualnetwork"
          do
            if ! grep -qE "^${path}(/|$)" /tmp/zip.list; then
              echo "❌ Missing '${path}' in archive ${ZIP_URL}"
              head -n 80 /tmp/zip.list || true
              exit 1
            fi
          done
          echo "Archive layout OK."

      - name: Clean Terraform caches
        working-directory: ${{ env.TF_DIR }}
        run: rm -rf .terraform .terraform.lock.hcl

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Run TFLint (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint --minimum-failure-severity=error

      - name: Run TFLint (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          tflint --init
          tflint

      - name: Terraform Init (Dev/Staging)
        if: ${{ steps.envsel.outputs.env != 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init -upgrade -input=false \
            -backend-config=key=state/${{ steps.envsel.outputs.env }}.terraform.tfstate

      - name: Terraform Init (Production)
        if: ${{ steps.envsel.outputs.env == 'production' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init -input=false \
            -backend-config=key=state/production.terraform.tfstate

      - name: Terraform Format
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color -var-file="${{ env.TFVARS_FILE }}" -out=tfplan

      - name: Export plan to JSON
        working-directory: ${{ env.TF_DIR }}
        run: terraform show -json tfplan > plan.json

      - name: Checkov (Terraform plan scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ env.TF_DIR }}/plan.json
          framework: terraform_plan
          output_format: sarif
          output_file_path: results-plan.sarif
          soft_fail: false

      - name: Manual Approval for Production
        if: github.event_name == 'workflow_dispatch' && steps.envsel.outputs.env == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vinaypalvirk51, sukhdeep26
          minimum-approvals: 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve tfplan
