name: Build, Scan, Push (ACR)

on:
  push:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

jobs:
  # ============================
  # STAGING (runs on branch: dev)
  # ============================
  staging:
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    environment: staging
    env:
      IMAGE_NAME: myapp

    steps:
      - uses: actions/checkout@v3

      # OIDC login (same SP can serve both envs; ensure a federated cred exists)
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Resolve ACR:
      # 1) environment secret ACR_NAME (preferred)
      # 2) repo secret STAGING_ACR_NAME (name)
      # 3) repo secret STAGING_ACR_LOGIN (full FQDN)
      - name: Resolve ACR (staging)
        id: env
        shell: bash
        run: |
          set -e
          NAME="${{ secrets.ACR_NAME || vars.ACR_NAME }}"
          if [ -z "$NAME" ]; then NAME="${{ secrets.STAGING_ACR_NAME }}"; fi

          REG=""
          if [ -n "$NAME" ]; then
            REG="$(az acr show -n "$NAME" --query loginServer -o tsv || true)"
          fi

          if [ -z "$REG" ]; then
            REG_FQDN="${{ secrets.STAGING_ACR_LOGIN }}"
            if [ -n "$REG_FQDN" ]; then
              REG="$REG_FQDN"
              NAME="${REG%%.*}"
            fi
          fi

          if [ -z "$NAME" ] || [ -z "$REG" ]; then
            echo "::error ::No ACR configured. Set environment secret 'ACR_NAME' (preferred) OR repo secret 'STAGING_ACR_NAME' or 'STAGING_ACR_LOGIN'."
            exit 1
          fi

          echo "acr_name=$NAME"  >> "$GITHUB_OUTPUT"
          echo "acr_login=$REG"  >> "$GITHUB_OUTPUT"

      - name: Hadolint (Dockerfiles)
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true

      - name: Use Node (only if any package.json exist under src/*)
        if: ${{ hashFiles('src/**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps + lint per service
        if: ${{ hashFiles('src/**/package.json') != '' }}
        shell: bash
        run: |
          set -e
          for svcdir in src/*; do
            if [ -f "$svcdir/package.json" ]; then
              echo "üì¶ Installing in $svcdir"
              cd "$svcdir"
              if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
                npm ci || (echo "‚ö†Ô∏è npm ci failed ‚Üí npm install fallback" && npm install --no-audit --no-fund)
              else
                npm install --no-audit --no-fund
              fi
              npm run format:check --if-present
              npm run lint --if-present
              cd - >/dev/null
            fi
          done

      - name: ACR Docker login
        run: az acr login --name ${{ steps.env.outputs.acr_name }}

      - name: Build & push images (staging)
        shell: bash
        run: |
          set -e
          built_any=0
          for svcdir in src/*; do
            if [ -f "$svcdir/Dockerfile" ]; then
              svc="$(basename "$svcdir")"
              echo "üê≥ Building $svc (staging)"
              docker build -t "${{ steps.env.outputs.acr_login }}/$svc:staging" "$svcdir"
              docker push "${{ steps.env.outputs.acr_login }}/$svc:staging"
              built_any=1
            fi
          done
          if [ "$built_any" -eq 0 ]; then
            echo "::warning ::No Dockerfile found under src/* ‚Äì nothing to build."
          fi

  # ==============================
  # PRODUCTION (runs on branch: main)
  # ==============================
  production:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    env:
      IMAGE_NAME: myapp

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Same resolution pattern; if prod infra isn't created yet we SKIP cleanly
      - name: Resolve ACR (production)
        id: env
        shell: bash
        run: |
          set -e
          NAME="${{ secrets.ACR_NAME || vars.ACR_NAME }}"
          if [ -z "$NAME" ]; then NAME="${{ secrets.PROD_ACR_NAME }}"; fi

          REG=""
          if [ -n "$NAME" ]; then
            REG="$(az acr show -n "$NAME" --query loginServer -o tsv || true)"
          fi

          if [ -z "$REG" ]; then
            REG_FQDN="${{ secrets.PROD_ACR_LOGIN }}"
            if [ -n "$REG_FQDN" ]; then
              REG="$REG_FQDN"
              NAME="${REG%%.*}"
            fi
          fi

          if [ -z "$NAME" ] && [ -z "$REG" ]; then
            echo "::warning ::Production ACR not configured/available yet. Skipping production build."
            echo "skip_build=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ -n "$NAME" ] && [ -z "$REG" ]; then
            echo "::warning ::ACR '$NAME' not found yet (Terraform not applied?). Skipping production build."
            echo "skip_build=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "skip_build=false"   >> "$GITHUB_OUTPUT"
          echo "acr_name=$NAME"     >> "$GITHUB_OUTPUT"
          echo "acr_login=$REG"     >> "$GITHUB_OUTPUT"

      - name: Hadolint (Dockerfiles)
        if: ${{ steps.env.outputs.skip_build != 'true' && hashFiles('**/Dockerfile') != '' }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true

      - name: Use Node (only if any package.json exist under src/*)
        if: ${{ steps.env.outputs.skip_build != 'true' && hashFiles('src/**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps + lint per service
        if: ${{ steps.env.outputs.skip_build != 'true' && hashFiles('src/**/package.json') != '' }}
        shell: bash
        run: |
          set -e
          for svcdir in src/*; do
            if [ -f "$svcdir/package.json" ]; then
              echo "üì¶ Installing in $svcdir"
              cd "$svcdir"
              if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
                npm ci || (echo "‚ö†Ô∏è npm ci failed ‚Üí npm install fallback" && npm install --no-audit --no-fund)
              else
                npm install --no-audit --no-fund
              fi
              npm run format:check --if-present
              npm run lint --if-present
              cd - >/dev/null
            fi
          done

      - name: ACR Docker login
        if: ${{ steps.env.outputs.skip_build != 'true' }}
        run: az acr login --name ${{ steps.env.outputs.acr_name }}

      - name: Build & push images (production)
        if: ${{ steps.env.outputs.skip_build != 'true' }}
        shell: bash
        run: |
          set -e
          built_any=0
          for svcdir in src/*; do
            if [ -f "$svcdir/Dockerfile" ]; then
              svc="$(basename "$svcdir")"
              echo "üê≥ Building $svc (production)"
              docker build -t "${{ steps.env.outputs.acr_login }}/$svc:production" "$svcdir"
              docker push "${{ steps.env.outputs.acr_login }}/$svc:production"
              built_any=1
            fi
          done
          if [ "$built_any" -eq 0 ]; then
            echo "::warning ::No Dockerfile found under src/* ‚Äì nothing to build."
          fi
