name: Build, Scan, Push (ACR)

on:
  push:
    branches: [ main, dev ]
  # workflow_run:
  #   workflows: ["Terraform Pipeline"]
  #   types: [completed]
  #   branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

jobs:
  ci-cd:
    # run only when Terraform Pipeline completed successfully
    # if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}

        # Run staging only on dev, production only on main
    if: ${{
      (github.ref == 'refs/heads/dev'  && matrix.environment == 'staging') ||
      (github.ref == 'refs/heads/main' && matrix.environment == 'production') 
  }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [staging, production]

    env:
      IMAGE_NAME: myapp

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Environment-Specific Variables
      id: env
      run: |
        if [[ "${{ matrix.environment }}" == "staging" ]]; then
          echo "acr=${{ secrets.STAGING_ACR_LOGIN }}" >> $GITHUB_OUTPUT
        else
          echo "acr=${{ secrets.PROD_ACR_LOGIN }}" >> $GITHUB_OUTPUT
        fi

 # ---------- LINT (only Dockerfile + Node) ----------
    - name: Hadolint (Dockerfile)
      if: hashFiles('**/Dockerfile') != ''
      uses: hadolint/hadolint-action@v3.1.0

    - name: Use Node
      if: hashFiles('**/package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install deps (Node)
      if: hashFiles('**/package.json') != ''
      run: npm ci

    - name: Format check (Prettier)
      if: hashFiles('**/package.json') != ''
      run: npm run format:check --if-present

    - name: Lint (ESLint)
      if: hashFiles('**/package.json') != ''
      run: npm run lint --if-present
  # ---------- END LINT ----------

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Login to ACR
      run: az acr login --name ${{ steps.env.outputs.acr }}

    # - name: Login to JFrog
    #   run: echo "${{ secrets.JFROG_PASSWORD }}" | docker login ${{ secrets.JFROG_REGISTRY }} -u ${{ secrets.JFROG_USERNAME }} --password-stdin

    - name: Build Docker Image
      run: |
        docker build -t $IMAGE_NAME:${{ matrix.environment }} .

    - name: Push to ACR
      run: |
        docker tag $IMAGE_NAME:${{ matrix.environment }} ${{ steps.env.outputs.acr }}/$IMAGE_NAME:${{ matrix.environment }}
        docker push ${{ steps.env.outputs.acr }}/$IMAGE_NAME:${{ matrix.environment }}

